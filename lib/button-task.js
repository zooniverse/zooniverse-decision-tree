// Generated by CoffeeScript 1.7.1
(function() {
  var ButtonTask, Task, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Task = ((_ref = window.DecisionTree) != null ? _ref : require('./decision-tree')).Task;

  ButtonTask = (function(_super) {
    __extends(ButtonTask, _super);

    function ButtonTask() {
      return ButtonTask.__super__.constructor.apply(this, arguments);
    }

    ButtonTask.prototype.type = 'button';

    ButtonTask.prototype.chosenButton = null;

    ButtonTask.prototype.choiceTemplate = function(choice, i) {
      return "<button type='submit' name='" + this.key + "' value='" + choice.value + "' data-choice-index='" + i + "'>" + choice.label + "</button>";
    };

    ButtonTask.prototype.renderTemplate = function() {
      ButtonTask.__super__.renderTemplate.apply(this, arguments);
      return this.el.querySelector('.decision-tree-confirmation').style.display = 'none';
    };

    ButtonTask.prototype.enter = function() {
      ButtonTask.__super__.enter.apply(this, arguments);
      return this.el.addEventListener('click', this, false);
    };

    ButtonTask.prototype.exit = function() {
      ButtonTask.__super__.exit.apply(this, arguments);
      return this.el.removeEventListener('click', this, false);
    };

    ButtonTask.prototype.handleEvent = function(e) {
      if (e.type === 'click') {
        return this.handleClick(e);
      } else {
        return ButtonTask.__super__.handleEvent.apply(this, arguments);
      }
    };

    ButtonTask.prototype.handleClick = function(e) {
      return this.chosenButton = e.target;
    };

    ButtonTask.prototype.getValue = function() {
      var choice, choiceIndex;
      choiceIndex = this.chosenButton.getAttribute('data-choice-index');
      choice = this.choices[choiceIndex];
      return choice.value;
    };

    return ButtonTask;

  })(Task);

  window.DecisionTree.ButtonTask = ButtonTask;

  window.DecisionTree.registerTask(ButtonTask);

  if (typeof module !== "undefined" && module !== null) {
    module.exports = ButtonTask;
  }

}).call(this);
