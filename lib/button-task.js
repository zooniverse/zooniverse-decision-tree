// Generated by CoffeeScript 1.7.1
(function() {
  var ButtonTask, DecisionTree, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  DecisionTree = (_ref = window.DecisionTree) != null ? _ref : require('./decision-tree');

  ButtonTask = (function(_super) {
    __extends(ButtonTask, _super);

    function ButtonTask() {
      return ButtonTask.__super__.constructor.apply(this, arguments);
    }

    ButtonTask.type = 'button';

    ButtonTask.prototype.chosenButton = null;

    ButtonTask.prototype.choiceTemplate = function(choice, i) {
      return "<button type='button' name='" + this.key + "' value='" + choice.value + "' data-choice-index='" + i + "'>" + choice.label + "</button>";
    };

    ButtonTask.prototype.renderTemplate = function() {
      ButtonTask.__super__.renderTemplate.apply(this, arguments);
      return this.el.querySelector('.decision-tree-confirmation').style.display = 'none';
    };

    ButtonTask.prototype.enter = function() {
      ButtonTask.__super__.enter.apply(this, arguments);
      return this.el.addEventListener('click', this, false);
    };

    ButtonTask.prototype.exit = function() {
      ButtonTask.__super__.exit.apply(this, arguments);
      return this.el.removeEventListener('click', this, false);
    };

    ButtonTask.prototype.reset = function(value) {
      var choice, choiceIndex, i, _i, _len, _ref1, _ref2;
      if (value != null) {
        _ref1 = this.choices;
        for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
          choice = _ref1[i];
          if (choice.value === value) {
            choiceIndex = i;
          }
        }
        return (_ref2 = this.el.querySelector("[data-choice-index='" + choiceIndex + "']")) != null ? _ref2.focus() : void 0;
      }
    };

    ButtonTask.prototype.handleEvent = function(e) {
      ButtonTask.__super__.handleEvent.apply(this, arguments);
      if (e.type === 'click' && e.target.name === this.key) {
        this.chosenButton = e.target;
        return this.confirm();
      }
    };

    ButtonTask.prototype.getValue = function() {
      var choice, choiceIndex, _ref1;
      choiceIndex = (_ref1 = this.chosenButton) != null ? _ref1.getAttribute('data-choice-index') : void 0;
      choice = this.choices[choiceIndex];
      return choice != null ? choice.value : void 0;
    };

    ButtonTask.prototype.getNext = function() {
      var choice, choiceIndex, _ref1;
      choiceIndex = (_ref1 = this.chosenButton) != null ? _ref1.getAttribute('data-choice-index') : void 0;
      choice = this.choices[choiceIndex];
      if ('next' in choice) {
        return choice.next;
      } else {
        return this.next;
      }
    };

    return ButtonTask;

  })(DecisionTree.Task);

  DecisionTree.registerTask(ButtonTask);

  DecisionTree.ButtonTask = ButtonTask;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = ButtonTask;
  }

}).call(this);
