// Generated by CoffeeScript 1.7.1
(function() {
  var DecisionTree, Task;

  Task = (function() {
    Task.prototype.type = 'base-task';

    Task.prototype.key = '';

    Task.prototype.question = '';

    Task.prototype.choices = null;

    Task.prototype.next = null;

    Task.prototype.confirmLabel = 'OK';

    Task.prototype.template = function() {
      var choice, i;
      return "<div class='decision-tree-question'>" + this.question + "</div> <div class='decision-tree-choices'> " + (((function() {
        var _i, _len, _ref, _results;
        _ref = this.choices;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          choice = _ref[i];
          _results.push("<div class='decision-tree-choice'>" + (this.choiceTemplate(choice, i)) + "</div>");
        }
        return _results;
      }).call(this)).join('\n')) + " </div> <div class='decision-tree-confirmation'> <button type='submit' name='decision-tree-confirm'>" + this.confirmLabel + "</button> </div>";
    };

    Task.prototype.choiceTemplate = function(choice, i) {
      return "<div>" + i + ": " + choice.label + " (" + choice.value + ")</div>";
    };

    function Task(options) {
      var key, value;
      if (options == null) {
        options = {};
      }
      for (key in options) {
        value = options[key];
        this[key] = value;
      }
      if (this.choices == null) {
        this.choices = [];
      }
      this.createRoot();
      this.hide();
    }

    Task.prototype.createRoot = function() {
      this.el = document.createElement('form');
      this.el.className = 'decision-tree-task';
      return this.el.setAttribute('data-task-type', this.type);
    };

    Task.prototype.renderTemplate = function() {
      return this.el.insertAdjacentHTML('beforeEnd', this.template());
    };

    Task.prototype.handleEvent = function(e) {
      var handler;
      handler = (function() {
        switch (e.type) {
          case 'submit':
            return this.handleSubmit;
        }
      }).call(this);
      return handler != null ? handler.call(this, e) : void 0;
    };

    Task.prototype.handleSubmit = function(e) {
      return e.preventDefault();
    };

    Task.prototype.show = function() {
      return this.el.style.display = '';
    };

    Task.prototype.hide = function() {
      return this.el.style.display = 'none';
    };

    Task.prototype.enter = function() {
      this.show();
      return this.el.addEventListener('submit', this, false);
    };

    Task.prototype.exit = function() {
      this.el.removeEventListener('submit', this, false);
      return this.hide();
    };

    Task.prototype.getValue = function() {
      throw new Error("Define Task::getValue for " + this.type);
    };

    Task.prototype.getNext = function() {
      return this.next;
    };

    Task.prototype.reset = function(value) {
      return this.el.reset();
    };

    return Task;

  })();

  DecisionTree = (function() {
    DecisionTree.tasks = {};

    DecisionTree.registerTask = function(taskClass) {
      return this.tasks[taskClass.prototype.type] = taskClass;
    };

    DecisionTree.prototype.tasks = null;

    DecisionTree.prototype.firstTask = null;

    DecisionTree.prototype.backLabel = 'Back';

    DecisionTree.prototype.LOAD_TASK = 'decision-tree:load-task';

    DecisionTree.prototype.CHANGE = 'decision-tree:change-values';

    DecisionTree.prototype.CONFIRM = 'decision-tree:confirm-task-value';

    DecisionTree.prototype.COMPLETE = 'decision-tree:complete-tree';

    DecisionTree.prototype.RESET = 'decision-tree:reset-tree';

    DecisionTree.prototype.currentTask = null;

    DecisionTree.prototype.taskChain = null;

    DecisionTree.prototype.valueChain = null;

    function DecisionTree(options) {
      var key, value;
      if (options == null) {
        options = {};
      }
      this.taskChain = [];
      this.valueChain = [];
      for (key in options) {
        value = options[key];
        this[key] = value;
      }
      if (this.tasks == null) {
        this.tasks = {};
      }
      this.createRoot();
      this.createBackButton();
      this.addTasks();
      this.reset();
    }

    DecisionTree.prototype.createRoot = function() {
      this.el = document.createElement('div');
      this.el.className = 'decision-tree';
      this.el.addEventListener('change', this, false);
      return this.el.addEventListener('submit', this, false);
    };

    DecisionTree.prototype.createBackButton = function() {
      this.backButton = document.createElement('button');
      this.backButton.type = 'button';
      this.backButton.name = 'decision-tree-go-back';
      this.backButton.innerHTML = this.backLabel;
      this.backButton.addEventListener('click', this, false);
      return this.el.appendChild(this.backButton);
    };

    DecisionTree.prototype.addTasks = function() {
      var task, taskKey, _ref, _results;
      _ref = this.tasks;
      _results = [];
      for (taskKey in _ref) {
        task = _ref[taskKey];
        if (!(task instanceof Task)) {
          if (this.constructor.tasks[task.type] != null) {
            task = new this.constructor.tasks[task.type](task);
            this.tasks[taskKey] = task;
          } else {
            throw new Error("No registered task " + task.type);
          }
        }
        if (!task.key) {
          task.key = taskKey;
        }
        task.renderTemplate();
        _results.push(this.el.appendChild(task.el));
      }
      return _results;
    };

    DecisionTree.prototype.handleEvent = function(e) {
      var handler;
      handler = (function() {
        switch (e.target) {
          case this.backButton:
            switch (e.type) {
              case 'click':
                return this.goBack;
            }
            break;
          default:
            switch (e.type) {
              case 'change':
                return this.handleChange;
              case 'submit':
                return this.handleSubmit;
            }
        }
      }).call(this);
      return handler != null ? handler.call(this, e) : void 0;
    };

    DecisionTree.prototype.handleChange = function(e) {
      return this.syncCurrentValue();
    };

    DecisionTree.prototype.handleSubmit = function(e) {
      var _ref;
      this.syncCurrentValue();
      this._dispatchEvent(this.CONFIRM);
      return this.loadTask((_ref = this.currentTask) != null ? _ref.getNext() : void 0);
    };

    DecisionTree.prototype.loadTask = function(task, value) {
      var _ref;
      if ((_ref = this.currentTask) != null) {
        _ref.exit();
      }
      this.currentTask = null;
      if (typeof task === 'function') {
        return this.loadTask(task, value);
      } else if (typeof task === 'string') {
        return this.loadTask(this.tasks[task], value);
      } else if (task != null) {
        this.currentTask = task;
        this.currentTask.reset(value);
        this.taskChain.push(this.currentTask.key);
        this.valueChain.push(this.currentTask.getValue());
        this.currentTask.enter();
        this.backButton.disabled = this.taskChain.length === 1;
        return this._dispatchEvent(this.LOAD_TASK, this.currentTask);
      } else {
        return this._dispatchEvent(this.COMPLETE, {
          value: this.getValues()
        });
      }
    };

    DecisionTree.prototype.goBack = function() {
      if (this.taskChain.length !== 1) {
        this.taskChain.pop();
        this.valueChain.pop();
        return this.loadTask(this.taskChain.pop(), this.valueChain.pop());
      }
    };

    DecisionTree.prototype.syncCurrentValue = function() {
      var _ref, _ref1;
      console.log('Syncing');
      this.valueChain[this.valueChain.length - 1] = (_ref = this.currentTask) != null ? _ref.getValue() : void 0;
      return this._dispatchEvent(this.CHANGE, {
        key: (_ref1 = this.currentTask) != null ? _ref1.key : void 0,
        value: this.valueChain[this.valueChain.length - 1]
      });
    };

    DecisionTree.prototype.getValues = function() {
      var i, key, result, _i, _len, _ref, _ref1, _results;
      _ref = this.taskChain;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        key = _ref[i];
        result = {};
        result[key] = (_ref1 = this.valueChain[i]) != null ? _ref1 : null;
        _results.push(result);
      }
      return _results;
    };

    DecisionTree.prototype.reset = function(taskToLoad) {
      var task, taskKey, _ref;
      if (taskToLoad == null) {
        taskToLoad = this.firstTask;
      }
      _ref = this.tasks;
      for (taskKey in _ref) {
        task = _ref[taskKey];
        task.reset();
      }
      this.taskChain.splice(0);
      this.valueChain.splice(0);
      this.syncCurrentValue();
      this._dispatchEvent(this.RESET);
      if (taskToLoad != null) {
        return this.loadTask(taskToLoad);
      }
    };

    DecisionTree.prototype._dispatchEvent = function(eventName, detail) {
      var e;
      if (+location.port > 1023) {
        if (typeof console !== "undefined" && console !== null) {
          console.log(this, eventName, {
            detail: detail
          });
        }
      }
      e = document.createEvent('CustomEvent');
      e.initCustomEvent(eventName, true, true, detail);
      return this.el.dispatchEvent(e);
    };

    return DecisionTree;

  })();

  DecisionTree.Task = Task;

  window.DecisionTree = DecisionTree;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = DecisionTree;
  }

}).call(this);
